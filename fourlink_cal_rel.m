%%four link calculation
Lc0=0.05; Lc1=0.07; Lc2=0.035; Lc3=0.035;
L0=0.12; L1=0.14; L2=0.07; L3=0.07;
m0=0.0425; m1=0.0111; m2=0.01955; m3=0.0119;
I0=1.02*10^(-4); I1=1.81*10^(-5); I2=1.19*10^(-5); I3=0.49*10^(-5);

g=9.8;
%PID gain
c=20;k=144;

syms xcm ycm q0 qr1 qr2 qr3 dq0 dqr1 dqr2 dqr3 T1 T2 T3;
q=[q0;qr1;qr2;qr3];
%if i use vpa(ME), it changed decimal/simple, ALSO, i use digits(3) means
%express three digitsvi

ME =[ (I0*m0 + I0*m1 + I0*m2 + I0*m3 + L0^2*m0*m2 + L0^2*m0*m3 + L0^2*m1*m2 + L0^2*m1*m3 + L2^2*m0*m3 + L2^2*m1*m3 + L2^2*m2*m3 + Lc0^2*m0*m1 + Lc0^2*m0*m2 + Lc1^2*m0*m1 + Lc0^2*m0*m3 + Lc1^2*m1*m2 + Lc2^2*m0*m2 + Lc1^2*m1*m3 + Lc2^2*m1*m2 + Lc3^2*m0*m3 + Lc2^2*m2*m3 + Lc3^2*m1*m3 + Lc3^2*m2*m3 - 2*L0*Lc0*m0*m2 - 2*L0*Lc0*m0*m3 - 2*L2*Lc2*m2*m3 + 2*Lc1*Lc3*m1*m3*cos(qr2 - qr1 + qr3) + 2*L0*Lc3*m0*m3*cos(qr2 + qr3) + 2*L0*Lc3*m1*m3*cos(qr2 + qr3) - 2*Lc0*Lc3*m0*m3*cos(qr2 + qr3) + 2*L0*L2*m0*m3*cos(qr2) + 2*L0*L2*m1*m3*cos(qr2) + 2*L0*Lc1*m1*m2*cos(qr1) + 2*L0*Lc1*m1*m3*cos(qr1) + 2*L0*Lc2*m0*m2*cos(qr2) + 2*L0*Lc2*m1*m2*cos(qr2) - 2*L2*Lc0*m0*m3*cos(qr2) + 2*L2*Lc3*m0*m3*cos(qr3) + 2*L2*Lc3*m1*m3*cos(qr3) + 2*L2*Lc3*m2*m3*cos(qr3) + 2*Lc0*Lc1*m0*m1*cos(qr1) - 2*Lc0*Lc2*m0*m2*cos(qr2) - 2*Lc2*Lc3*m2*m3*cos(qr3) + 2*L2*Lc1*m1*m3*cos(qr1 - qr2) + 2*Lc1*Lc2*m1*m2*cos(qr1 - qr2))/(m0 + m1 + m2 + m3), -(Lc1*m1*(Lc1*m0 + Lc1*m2 + Lc1*m3 + L2*m3*cos(qr1 - qr2) + Lc2*m2*cos(qr1 - qr2) + Lc3*m3*cos(qr2 - qr1 + qr3) + L0*m2*cos(qr1) + L0*m3*cos(qr1) + Lc0*m0*cos(qr1)))/(m0 + m1 + m2 + m3), -(L2^2*m0*m3 + L2^2*m1*m3 + L2^2*m2*m3 + Lc2^2*m0*m2 + Lc2^2*m1*m2 + Lc3^2*m0*m3 + Lc2^2*m2*m3 + Lc3^2*m1*m3 + Lc3^2*m2*m3 - 2*L2*Lc2*m2*m3 + Lc1*Lc3*m1*m3*cos(qr2 - qr1 + qr3) + L0*Lc3*m0*m3*cos(qr2 + qr3) + L0*Lc3*m1*m3*cos(qr2 + qr3) - Lc0*Lc3*m0*m3*cos(qr2 + qr3) + L0*L2*m0*m3*cos(qr2) + L0*L2*m1*m3*cos(qr2) + L0*Lc2*m0*m2*cos(qr2) + L0*Lc2*m1*m2*cos(qr2) - L2*Lc0*m0*m3*cos(qr2) + 2*L2*Lc3*m0*m3*cos(qr3) + 2*L2*Lc3*m1*m3*cos(qr3) + 2*L2*Lc3*m2*m3*cos(qr3) - Lc0*Lc2*m0*m2*cos(qr2) - 2*Lc2*Lc3*m2*m3*cos(qr3) + L2*Lc1*m1*m3*cos(qr1 - qr2) + Lc1*Lc2*m1*m2*cos(qr1 - qr2))/(m0 + m1 + m2 + m3), -(Lc3*m3*(Lc3*m0 + Lc3*m1 + Lc3*m2 + Lc1*m1*cos(qr2 - qr1 + qr3) + L0*m0*cos(qr2 + qr3) + L0*m1*cos(qr2 + qr3) - Lc0*m0*cos(qr2 + qr3) + L2*m0*cos(qr3) + L2*m1*cos(qr3) + L2*m2*cos(qr3) - Lc2*m2*cos(qr3)))/(m0 + m1 + m2 + m3);
c1*m1*(Lc1*m0 + Lc1*m2 + Lc1*m3 + L2*m3*cos(qr1 - qr2) + Lc2*m2*cos(qr1 - qr2) + Lc3*m3*cos(qr2 - qr1 + qr3) + L0*m2*cos(qr1) + L0*m3*cos(qr1) + Lc0*m0*cos(qr1)))/(m0 + m1 + m2 + m3),                                                                                             (I1*m0 + I1*m1 + I1*m2 + I1*m3 + Lc1^2*m0*m1 + Lc1^2*m1*m2 + Lc1^2*m1*m3)/(m0 + m1 + m2 + m3),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             (Lc1*m1*(L2*m3*cos(qr1 - qr2) + Lc2*m2*cos(qr1 - qr2) + Lc3*m3*cos(qr2 - qr1 + qr3)))/(m0 + m1 + m2 + m3),                                                                                                                                                                          (Lc1*Lc3*m1*m3*cos(qr2 - qr1 + qr3))/(m0 + m1 + m2 + m3);
                                                                                                                                                                                                                                                                                                                 -(L2^2*m0*m3 + L2^2*m1*m3 + L2^2*m2*m3 + Lc2^2*m0*m2 + Lc2^2*m1*m2 + Lc3^2*m0*m3 + Lc2^2*m2*m3 + Lc3^2*m1*m3 + Lc3^2*m2*m3 - 2*L2*Lc2*m2*m3 + Lc1*Lc3*m1*m3*cos(qr2 - qr1 + qr3) + L0*Lc3*m0*m3*cos(qr2 + qr3) + L0*Lc3*m1*m3*cos(qr2 + qr3) - Lc0*Lc3*m0*m3*cos(qr2 + qr3) + L0*L2*m0*m3*cos(qr2) + L0*L2*m1*m3*cos(qr2) + L0*Lc2*m0*m2*cos(qr2) + L0*Lc2*m1*m2*cos(qr2) - L2*Lc0*m0*m3*cos(qr2) + 2*L2*Lc3*m0*m3*cos(qr3) + 2*L2*Lc3*m1*m3*cos(qr3) + 2*L2*Lc3*m2*m3*cos(qr3) - Lc0*Lc2*m0*m2*cos(qr2) - 2*Lc2*Lc3*m2*m3*cos(qr3) + L2*Lc1*m1*m3*cos(qr1 - qr2) + Lc1*Lc2*m1*m2*cos(qr1 - qr2))/(m0 + m1 + m2 + m3),                                                                                 (Lc1*m1*(L2*m3*cos(qr1 - qr2) + Lc2*m2*cos(qr1 - qr2) + Lc3*m3*cos(qr2 - qr1 + qr3)))/(m0 + m1 + m2 + m3),                                                                                                                                                                                                                                                                                                              (I2*m0 + I2*m1 + I2*m2 + I2*m3 + L2^2*m0*m3 + L2^2*m1*m3 + L2^2*m2*m3 + Lc2^2*m0*m2 + Lc2^2*m1*m2 + Lc3^2*m0*m3 + Lc2^2*m2*m3 + Lc3^2*m1*m3 + Lc3^2*m2*m3 - 2*L2*Lc2*m2*m3 + 2*L2*Lc3*m0*m3*cos(qr3) + 2*L2*Lc3*m1*m3*cos(qr3) + 2*L2*Lc3*m2*m3*cos(qr3) - 2*Lc2*Lc3*m2*m3*cos(qr3))/(m0 + m1 + m2 + m3),                                                                                                      (Lc3*m3*(Lc3*m0 + Lc3*m1 + Lc3*m2 + L2*m0*cos(qr3) + L2*m1*cos(qr3) + L2*m2*cos(qr3) - Lc2*m2*cos(qr3)))/(m0 + m1 + m2 + m3);
c3*m3*(Lc3*m0 + Lc3*m1 + Lc3*m2 + Lc1*m1*cos(qr2 - qr1 + qr3) + L0*m0*cos(qr2 + qr3) + L0*m1*cos(qr2 + qr3) - Lc0*m0*cos(qr2 + qr3) + L2*m0*cos(qr3) + L2*m1*cos(qr3) + L2*m2*cos(qr3) - Lc2*m2*cos(qr3)))/(m0 + m1 + m2 + m3),                                                                                                                                  (Lc1*Lc3*m1*m3*cos(qr2 - qr1 + qr3))/(m0 + m1 + m2 + m3),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          (Lc3*m3*(Lc3*m0 + Lc3*m1 + Lc3*m2 + L2*m0*cos(qr3) + L2*m1*cos(qr3) + L2*m2*cos(qr3) - Lc2*m2*cos(qr3)))/(m0 + m1 + m2 + m3),                                                                                                                                     (I3*m0 + I3*m1 + I3*m2 + I3*m3 + Lc3^2*m0*m3 + Lc3^2*m1*m3 + Lc3^2*m2*m3)/(m0 + m1 + m2 + m3)];
 
CE =[ -(L0*L2*dqr2*m0*m3*sin(qr2) + L0*L2*dqr2*m1*m3*sin(qr2) + L0*Lc1*dqr1*m1*m2*sin(qr1) + L0*Lc1*dqr1*m1*m3*sin(qr1) + L0*Lc2*dqr2*m0*m2*sin(qr2) + L0*Lc2*dqr2*m1*m2*sin(qr2) - L2*Lc0*dqr2*m0*m3*sin(qr2) + L2*Lc3*dqr3*m0*m3*sin(qr3) + L2*Lc3*dqr3*m1*m3*sin(qr3) + L2*Lc3*dqr3*m2*m3*sin(qr3) + Lc0*Lc1*dqr1*m0*m1*sin(qr1) - Lc0*Lc2*dqr2*m0*m2*sin(qr2) - Lc2*Lc3*dqr3*m2*m3*sin(qr3) + L2*Lc1*dqr1*m1*m3*sin(qr1 - qr2) - L2*Lc1*dqr2*m1*m3*sin(qr1 - qr2) + Lc1*Lc2*dqr1*m1*m2*sin(qr1 - qr2) - Lc1*Lc2*dqr2*m1*m2*sin(qr1 - qr2) - Lc1*Lc3*dqr1*m1*m3*sin(qr2 - qr1 + qr3) + Lc1*Lc3*dqr2*m1*m3*sin(qr2 - qr1 + qr3) + Lc1*Lc3*dqr3*m1*m3*sin(qr2 - qr1 + qr3) + L0*Lc3*dqr2*m0*m3*sin(qr2 + qr3) + L0*Lc3*dqr2*m1*m3*sin(qr2 + qr3) + L0*Lc3*dqr3*m0*m3*sin(qr2 + qr3) + L0*Lc3*dqr3*m1*m3*sin(qr2 + qr3) - Lc0*Lc3*dqr2*m0*m3*sin(qr2 + qr3) - Lc0*Lc3*dqr3*m0*m3*sin(qr2 + qr3))/(m0 + m1 + m2 + m3), -(Lc1*m1*(dq0 - dqr1)*(L2*m3*sin(qr1 - qr2) + Lc2*m2*sin(qr1 - qr2) - Lc3*m3*sin(qr2 - qr1 + qr3) + L0*m2*sin(qr1) + L0*m3*sin(qr1) + Lc0*m0*sin(qr1)))/(m0 + m1 + m2 + m3), (L0*L2*dqr2*m0*m3*sin(qr2) - L0*L2*dq0*m1*m3*sin(qr2) - L0*L2*dq0*m0*m3*sin(qr2) + L0*L2*dqr2*m1*m3*sin(qr2) - L0*Lc2*dq0*m0*m2*sin(qr2) - L0*Lc2*dq0*m1*m2*sin(qr2) + L2*Lc0*dq0*m0*m3*sin(qr2) + L0*Lc2*dqr2*m0*m2*sin(qr2) + L0*Lc2*dqr2*m1*m2*sin(qr2) - L2*Lc0*dqr2*m0*m3*sin(qr2) + L2*Lc3*dqr3*m0*m3*sin(qr3) + L2*Lc3*dqr3*m1*m3*sin(qr3) + L2*Lc3*dqr3*m2*m3*sin(qr3) + Lc0*Lc2*dq0*m0*m2*sin(qr2) - Lc0*Lc2*dqr2*m0*m2*sin(qr2) - Lc2*Lc3*dqr3*m2*m3*sin(qr3) + L2*Lc1*dq0*m1*m3*sin(qr1 - qr2) - L2*Lc1*dqr2*m1*m3*sin(qr1 - qr2) + Lc1*Lc2*dq0*m1*m2*sin(qr1 - qr2) - Lc1*Lc2*dqr2*m1*m2*sin(qr1 - qr2) - Lc1*Lc3*dq0*m1*m3*sin(qr2 - qr1 + qr3) + Lc1*Lc3*dqr2*m1*m3*sin(qr2 - qr1 + qr3) + Lc1*Lc3*dqr3*m1*m3*sin(qr2 - qr1 + qr3) - L0*Lc3*dq0*m0*m3*sin(qr2 + qr3) - L0*Lc3*dq0*m1*m3*sin(qr2 + qr3) + L0*Lc3*dqr2*m0*m3*sin(qr2 + qr3) + L0*Lc3*dqr2*m1*m3*sin(qr2 + qr3) + L0*Lc3*dqr3*m0*m3*sin(qr2 + qr3) + L0*Lc3*dqr3*m1*m3*sin(qr2 + qr3) + Lc0*Lc3*dq0*m0*m3*sin(qr2 + qr3) - Lc0*Lc3*dqr2*m0*m3*sin(qr2 + qr3) - Lc0*Lc3*dqr3*m0*m3*sin(qr2 + qr3))/(m0 + m1 + m2 + m3), Lc3*m3*(L0*sin(qr2 + qr3) - Lc0*sin(qr2 + qr3) + L2*sin(qr3))*(dqr2 - dq0 + dqr3) - (Lc3*m3*sin(qr2 - q0 + qr3)*(m3*(Lc3*cos(qr2 - q0 + qr3) + cos(q0)*(L0 - Lc0) + Lc2*cos(q0 - qr2) + cos(q0 - qr2)*(L2 - Lc2)) - m1*(Lc0*cos(q0) + Lc1*cos(q0 - qr1)) + m2*(cos(q0)*(L0 - Lc0) + Lc2*cos(q0 - qr2)))*(dqr2 - dq0 + dqr3))/(m0 + m1 + m2 + m3) - (Lc3*m3*cos(qr2 - q0 + qr3)*(m3*(sin(q0)*(L0 - Lc0) - Lc3*sin(qr2 - q0 + qr3) + Lc2*sin(q0 - qr2) + sin(q0 - qr2)*(L2 - Lc2)) - m1*(Lc0*sin(q0) + Lc1*sin(q0 - qr1)) + m2*(sin(q0)*(L0 - Lc0) + Lc2*sin(q0 - qr2)))*(dqr2 - dq0 + dqr3))/(m0 + m1 + m2 + m3);
c1*m1*(Lc3*dqr2*m3*sin(qr2 - qr1 + qr3) - Lc3*dq0*m3*sin(qr2 - qr1 + qr3) + Lc3*dqr3*m3*sin(qr2 - qr1 + qr3) + L0*dq0*m2*sin(qr1) + L0*dq0*m3*sin(qr1) + Lc0*dq0*m0*sin(qr1) + L2*dq0*m3*sin(qr1 - qr2) - L2*dqr2*m3*sin(qr1 - qr2) + Lc2*dq0*m2*sin(qr1 - qr2) - Lc2*dqr2*m2*sin(qr1 - qr2)))/(m0 + m1 + m2 + mc1*m1*(Lc3*dqr2*m3*sin(qr2 - qr1 + qr3) - Lc3*dq0*m3*sin(qr2 - qr1 + qr3) + Lc3*dqr3*m3*sin(qr2 - qr1 + qr3) + L2*dq0*m3*sin(qr1 - qr2) - L2*dqr2*m3*sin(qr1 - qr2) + Lc2*dq0*m2*sin(qr1 - qr2) - Lc2*dqr2*m2*sin(qr1 - qr2)))/(m0 + m1 + m2 + m3),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   -(Lc1*Lc3*m1*m3*sin(qr2 - qr1 + qr3)*(dqr2 - dq0 + dqr3))/(m0 + m1 + m2 + m3);
                                                                                                                                                                                                                                                          (L0*L2*dq0*m0*m3*sin(qr2) + L0*L2*dq0*m1*m3*sin(qr2) + L0*Lc2*dq0*m0*m2*sin(qr2) + L0*Lc2*dq0*m1*m2*sin(qr2) - L2*Lc0*dq0*m0*m3*sin(qr2) + L2*Lc3*dqr3*m0*m3*sin(qr3) + L2*Lc3*dqr3*m1*m3*sin(qr3) + L2*Lc3*dqr3*m2*m3*sin(qr3) - Lc0*Lc2*dq0*m0*m2*sin(qr2) - Lc2*Lc3*dqr3*m2*m3*sin(qr3) - L2*Lc1*dq0*m1*m3*sin(qr1 - qr2) + L2*Lc1*dqr1*m1*m3*sin(qr1 - qr2) - Lc1*Lc2*dq0*m1*m2*sin(qr1 - qr2) + Lc1*Lc2*dqr1*m1*m2*sin(qr1 - qr2) + Lc1*Lc3*dq0*m1*m3*sin(qr2 - qr1 + qr3) - Lc1*Lc3*dqr1*m1*m3*sin(qr2 - qr1 + qr3) + L0*Lc3*dq0*m0*m3*sin(qr2 + qr3) + L0*Lc3*dq0*m1*m3*sin(qr2 + qr3) - Lc0*Lc3*dq0*m0*m3*sin(qr2 + qr3))/(m0 + m1 + m2 + m3),                                                      (Lc1*m1*(dq0 - dqr1)*(L2*m3*sin(qr1 - qr2) + Lc2*m2*sin(qr1 - qr2) - Lc3*m3*sin(qr2 - qr1 + qr3)))/(m0 + m1 + m2 + mc3*dqr3*m3*sin(qr3)*(L2*m0 + L2*m1 + L2*m2 - Lc2*m2))/(m0 + m1 + m2 + m3),                                                                                                                                                                                                                                                                        (Lc3*m3*sin(qr2 - q0 + qr3)*(L2*m3*cos(q0 - qr2) + Lc2*m2*cos(q0 - qr2) + Lc3*m3*cos(qr2 - q0 + qr3))*(dqr2 - dq0 + dqr3))/(m0 + m1 + m2 + m3) - L2*Lc3*m3*sin(qr3)*(dqr2 - dq0 + dqr3) + (Lc3*m3*cos(qr2 - q0 + qr3)*(L2*m3*sin(q0 - qr2) + Lc2*m2*sin(q0 - qr2) - Lc3*m3*sin(qr2 - q0 + qr3))*(dqr2 - dq0 + dqr3))/(m0 + m1 + m2 + m3);
c3*m3*(Lc1*dq0*m1*sin(qr2 - qr1 + qr3) - Lc1*dqr1*m1*sin(qr2 - qr1 + qr3) + L0*dq0*m0*sin(qr2 + qr3) + L0*dq0*m1*sin(qr2 + qr3) - Lc0*dq0*m0*sin(qr2 + qr3) + L2*dq0*m0*sin(qr3) + L2*dq0*m1*sin(qr3) + L2*dq0*m2*sin(qr3) - L2*dqr2*m0*sin(qr3) - L2*dqr2*m1*sin(qr3) - L2*dqr2*m2*sin(qr3) - Lc2*dq0*m2*sin(qr3) + Lc2*dqr2*m2*sin(qr3)))/(m0 + m1 + m2 + m3),                                                                                                      -(Lc1*Lc3*m1*m3*sin(qr2 - qr1 + qr3)*(dq0 - dqr1))/(m0 + m1 + m2 + mc3*m3*sin(qr3)*(dq0 - dqr2)*(L2*m0 + L2*m1 + L2*m2 - Lc2*m2))/(m0 + m1 + m2 + m
 
TE=[0;T1;T2;T3]
digits(3)
ME=vpa(ME)
CE=vpa(CE)

A = ME(1,:);
Ds = null(A);
beta = -Ds*(Ds.'*ME(1:3,1:3)*Ds)^(-1)*Ds.'*ME(1:3,4)
%the process to find T1,T2,T3 control
% q0d=7*pi/12; q2d=pi/3; q3d=11*pi/12;
% a=ME^(-1)*CE*[dq0;dq1;dq2;dq3];
% b=[a(1,:);a(3,:);a(4,:)]+[-c*dq0-k*(q0-q0d);-c*dq2-k*(q2-q2d);-c*dq3-k*(q3-q3d)];
% c=ME^(-1)*[1 -1 0;0 1 0;-1 0 1;0 0 -1]; d=[c(1,:);c(3,:);c(4,:)];
% T=d^(-1)*b; T0=simplify(T(1));T1=simplify(T(2));T2=simplify(T(3));
 